import json
from utils import get_absolute_path

PIECES = 30 # Number of pieces in the puzzle. Can be 20, 30, or 40
START_POS = (0, 0) # Starting position for the first piece
RADIUS = 40 # Radius of the insertion circle from slot origin, for closest point calculations
INSERT_COOLDOWN = 60
INSERT_COOLDOWN_FINAL = 30

# Slot origin positions
if PIECES == 20:
    slot_pos = [
        [-169.25619506836, -141.77490234375], [-75.98412322998, -136.35800170898], [22.72633934021, -142.55610656738],
        [120.74810028076, -135.21020507813], [193.51809692383, -127.63480377197], [-196.04330444336, -51.650810241699],
        [-115.69779968262, -54.17599105835], [-6.1980919837952, -55.782890319824], [76.90234375, -48.666549682617],
        [179.51510620117, -35.352088928223], [-187.14529418945, 31.263759613037], [-98.3824996948, 14.648050308228],
        [-1.7490199804306, 46.567710876465], [100.13150024414, 6.3402009010315], [178.1815032959, 44.162818908691],
        [-190.41600036621, 127.61070251465], [-104.94129943848, 120.24520111084], [-9.1823596954346, 131.39529418945],
        [95.32169342041, 111.71880340576], [185.83349609375, 145.82460021973]
    ]
elif PIECES == 30:
    slot_pos = [
        [-208.33270263672, -139.22230529785], [-163.57350158691, -136.84910583496], [-71.222862243652, -139.85600280762],
        [0.64748102426529, -153.45300292969], [75.922569274902, -137.09440612793], [140.94479370117, -129.47129821777],
        [199.5677947998, -140.13130187988], [-206.87480163574, -36.500099182129], [-164.09089660645, -47.45837020874],
        [-118.17060089111, -71.480827331543], [-62.803958892822, -61.564430236816], [0.65226799249649, -83.702239990234],
        [80.751617431641, -37.586200714111], [143.00369262695, -48.74462890625], [194.09739685059, -46.689098358154],
        [-194.56799316406, 57.949588775635], [-142.44580078125, 27.517910003662], [-78.992637634277, 36.582660675049],
        [-20.071899414063, 11.007169723511], [30.75532913208, 3.8848850727081], [56.978351593018, 58.597030639648],
        [137.5897064209, 37.230140686035], [196.83419799805, 45.647430419922], [-200.98620605469, 138.66540527344],
        [-132.55639648438, 119.16059875488], [-70.044563293457, 127.02520751953], [0.39350798726082, 119.62660217285],
        [71.942253112793, 131.00340270996], [131.60380554199, 119.65730285645], [197.49769592285, 140.05009460449]
    ]
elif PIECES == 40:
    slot_pos = [
        [-198.49261474609, -146.5768737793], [-147.88798522949, -116.36735534668], [-101.80919647217, -144.65769958496],
        [-21.750953674316, -163.68536376953], [-11.059808731079, -117.23391723633], [73.732032775879, -134.5611114502],
        [126.8190612793, -157.04948425293], [205.34396362305, -123.13246917725], [-190.96594238281, -63.778198242188],
        [-144.14622497559, -64.884201049805], [-95.482978820801, -63.409545898438], [-33.916744232178, -64.146873474121],
        [20.644975662231, -70.782768249512], [92.165031433105, -58.248294830322], [60.828945159912, -39.446647644043],
        [142.30299377441, -83.685859680176], [186.91091918945, -37.971996307373], [-196.49604797363, -5.1612458229065],
        [-112.81003570557, 17.695688247681], [-71.888748168945, -12.534449577332], [-20.276332855225, 6.2672271728516],
        [48.294498443604, 8.479190826416], [136.03573608398, 1.4746420383453], [191.70346069336, 26.912197113037],
        [-198.33941650391, 64.515525817871], [-151.88806152344, 51.981098175049], [-99.538238525391, 95.114303588867],
        [-46.082534790039, 71.151435852051], [4.792585849762, 62.30358505249], [61.934921264648, 60.460273742676],
        [112.07272338867, 57.879650115967], [188.01690673828, 77.418617248535], [-201.65731811523, 146.72686767578],
        [-148.93881225586, 119.81452178955], [-115.39063262939, 155.20603942871], [-41.658599853516, 145.9895324707],
        [12.903108596802, 138.98498535156], [67.096153259277, 134.92971801758], [133.08639526367, 132.34906005859],
        [196.12716674805, 147.09562683105]
    ]

# Load stick vector map
file_path = get_absolute_path('stick_map.json')
with open(file_path, 'r', encoding='utf-8') as f:
    raw_data = json.load(f)

stick_vectors = [
    ((int(k.split(',')[0][1:]), int(k.split(',')[1][:-1])), tuple(v))
    for k, v in raw_data.items()
]
